// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shorturl_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shorturl_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shorturl_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shorturl_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shorturl_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shorturl_5frpc_2eproto;
namespace shorturl_rpc {
class ConvertToShortUrlRequest;
class ConvertToShortUrlRequestDefaultTypeInternal;
extern ConvertToShortUrlRequestDefaultTypeInternal _ConvertToShortUrlRequest_default_instance_;
class ConvertToShortUrlResponse;
class ConvertToShortUrlResponseDefaultTypeInternal;
extern ConvertToShortUrlResponseDefaultTypeInternal _ConvertToShortUrlResponse_default_instance_;
class ResolveShortUrlRequest;
class ResolveShortUrlRequestDefaultTypeInternal;
extern ResolveShortUrlRequestDefaultTypeInternal _ResolveShortUrlRequest_default_instance_;
class ResolveShortUrlResponse;
class ResolveShortUrlResponseDefaultTypeInternal;
extern ResolveShortUrlResponseDefaultTypeInternal _ResolveShortUrlResponse_default_instance_;
}  // namespace shorturl_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::shorturl_rpc::ConvertToShortUrlRequest* Arena::CreateMaybeMessage<::shorturl_rpc::ConvertToShortUrlRequest>(Arena*);
template<> ::shorturl_rpc::ConvertToShortUrlResponse* Arena::CreateMaybeMessage<::shorturl_rpc::ConvertToShortUrlResponse>(Arena*);
template<> ::shorturl_rpc::ResolveShortUrlRequest* Arena::CreateMaybeMessage<::shorturl_rpc::ResolveShortUrlRequest>(Arena*);
template<> ::shorturl_rpc::ResolveShortUrlResponse* Arena::CreateMaybeMessage<::shorturl_rpc::ResolveShortUrlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shorturl_rpc {

// ===================================================================

class ConvertToShortUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorturl_rpc.ConvertToShortUrlRequest) */ {
 public:
  inline ConvertToShortUrlRequest() : ConvertToShortUrlRequest(nullptr) {};
  virtual ~ConvertToShortUrlRequest();

  ConvertToShortUrlRequest(const ConvertToShortUrlRequest& from);
  ConvertToShortUrlRequest(ConvertToShortUrlRequest&& from) noexcept
    : ConvertToShortUrlRequest() {
    *this = ::std::move(from);
  }

  inline ConvertToShortUrlRequest& operator=(const ConvertToShortUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertToShortUrlRequest& operator=(ConvertToShortUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvertToShortUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertToShortUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ConvertToShortUrlRequest*>(
               &_ConvertToShortUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvertToShortUrlRequest& a, ConvertToShortUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertToShortUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertToShortUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvertToShortUrlRequest* New() const final {
    return CreateMaybeMessage<ConvertToShortUrlRequest>(nullptr);
  }

  ConvertToShortUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvertToShortUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvertToShortUrlRequest& from);
  void MergeFrom(const ConvertToShortUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertToShortUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorturl_rpc.ConvertToShortUrlRequest";
  }
  protected:
  explicit ConvertToShortUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shorturl_5frpc_2eproto);
    return ::descriptor_table_shorturl_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullUrlFieldNumber = 1,
  };
  // string full_url = 1;
  void clear_full_url();
  const std::string& full_url() const;
  void set_full_url(const std::string& value);
  void set_full_url(std::string&& value);
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  std::string* mutable_full_url();
  std::string* release_full_url();
  void set_allocated_full_url(std::string* full_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_url(
      std::string* full_url);
  private:
  const std::string& _internal_full_url() const;
  void _internal_set_full_url(const std::string& value);
  std::string* _internal_mutable_full_url();
  public:

  // @@protoc_insertion_point(class_scope:shorturl_rpc.ConvertToShortUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shorturl_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ConvertToShortUrlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorturl_rpc.ConvertToShortUrlResponse) */ {
 public:
  inline ConvertToShortUrlResponse() : ConvertToShortUrlResponse(nullptr) {};
  virtual ~ConvertToShortUrlResponse();

  ConvertToShortUrlResponse(const ConvertToShortUrlResponse& from);
  ConvertToShortUrlResponse(ConvertToShortUrlResponse&& from) noexcept
    : ConvertToShortUrlResponse() {
    *this = ::std::move(from);
  }

  inline ConvertToShortUrlResponse& operator=(const ConvertToShortUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvertToShortUrlResponse& operator=(ConvertToShortUrlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConvertToShortUrlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvertToShortUrlResponse* internal_default_instance() {
    return reinterpret_cast<const ConvertToShortUrlResponse*>(
               &_ConvertToShortUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConvertToShortUrlResponse& a, ConvertToShortUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvertToShortUrlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvertToShortUrlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConvertToShortUrlResponse* New() const final {
    return CreateMaybeMessage<ConvertToShortUrlResponse>(nullptr);
  }

  ConvertToShortUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConvertToShortUrlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConvertToShortUrlResponse& from);
  void MergeFrom(const ConvertToShortUrlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvertToShortUrlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorturl_rpc.ConvertToShortUrlResponse";
  }
  protected:
  explicit ConvertToShortUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shorturl_5frpc_2eproto);
    return ::descriptor_table_shorturl_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlmd5FieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string urlmd5 = 2;
  void clear_urlmd5();
  const std::string& urlmd5() const;
  void set_urlmd5(const std::string& value);
  void set_urlmd5(std::string&& value);
  void set_urlmd5(const char* value);
  void set_urlmd5(const char* value, size_t size);
  std::string* mutable_urlmd5();
  std::string* release_urlmd5();
  void set_allocated_urlmd5(std::string* urlmd5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_urlmd5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_urlmd5(
      std::string* urlmd5);
  private:
  const std::string& _internal_urlmd5() const;
  void _internal_set_urlmd5(const std::string& value);
  std::string* _internal_mutable_urlmd5();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shorturl_rpc.ConvertToShortUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr urlmd5_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shorturl_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ResolveShortUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorturl_rpc.ResolveShortUrlRequest) */ {
 public:
  inline ResolveShortUrlRequest() : ResolveShortUrlRequest(nullptr) {};
  virtual ~ResolveShortUrlRequest();

  ResolveShortUrlRequest(const ResolveShortUrlRequest& from);
  ResolveShortUrlRequest(ResolveShortUrlRequest&& from) noexcept
    : ResolveShortUrlRequest() {
    *this = ::std::move(from);
  }

  inline ResolveShortUrlRequest& operator=(const ResolveShortUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveShortUrlRequest& operator=(ResolveShortUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveShortUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveShortUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveShortUrlRequest*>(
               &_ResolveShortUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResolveShortUrlRequest& a, ResolveShortUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveShortUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveShortUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveShortUrlRequest* New() const final {
    return CreateMaybeMessage<ResolveShortUrlRequest>(nullptr);
  }

  ResolveShortUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveShortUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveShortUrlRequest& from);
  void MergeFrom(const ResolveShortUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveShortUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorturl_rpc.ResolveShortUrlRequest";
  }
  protected:
  explicit ResolveShortUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shorturl_5frpc_2eproto);
    return ::descriptor_table_shorturl_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortUrlFieldNumber = 1,
  };
  // string short_url = 1;
  void clear_short_url();
  const std::string& short_url() const;
  void set_short_url(const std::string& value);
  void set_short_url(std::string&& value);
  void set_short_url(const char* value);
  void set_short_url(const char* value, size_t size);
  std::string* mutable_short_url();
  std::string* release_short_url();
  void set_allocated_short_url(std::string* short_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_short_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_short_url(
      std::string* short_url);
  private:
  const std::string& _internal_short_url() const;
  void _internal_set_short_url(const std::string& value);
  std::string* _internal_mutable_short_url();
  public:

  // @@protoc_insertion_point(class_scope:shorturl_rpc.ResolveShortUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shorturl_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ResolveShortUrlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shorturl_rpc.ResolveShortUrlResponse) */ {
 public:
  inline ResolveShortUrlResponse() : ResolveShortUrlResponse(nullptr) {};
  virtual ~ResolveShortUrlResponse();

  ResolveShortUrlResponse(const ResolveShortUrlResponse& from);
  ResolveShortUrlResponse(ResolveShortUrlResponse&& from) noexcept
    : ResolveShortUrlResponse() {
    *this = ::std::move(from);
  }

  inline ResolveShortUrlResponse& operator=(const ResolveShortUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveShortUrlResponse& operator=(ResolveShortUrlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResolveShortUrlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResolveShortUrlResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveShortUrlResponse*>(
               &_ResolveShortUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResolveShortUrlResponse& a, ResolveShortUrlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveShortUrlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveShortUrlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResolveShortUrlResponse* New() const final {
    return CreateMaybeMessage<ResolveShortUrlResponse>(nullptr);
  }

  ResolveShortUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResolveShortUrlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResolveShortUrlResponse& from);
  void MergeFrom(const ResolveShortUrlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveShortUrlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shorturl_rpc.ResolveShortUrlResponse";
  }
  protected:
  explicit ResolveShortUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shorturl_5frpc_2eproto);
    return ::descriptor_table_shorturl_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullUrlFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string full_url = 2;
  void clear_full_url();
  const std::string& full_url() const;
  void set_full_url(const std::string& value);
  void set_full_url(std::string&& value);
  void set_full_url(const char* value);
  void set_full_url(const char* value, size_t size);
  std::string* mutable_full_url();
  std::string* release_full_url();
  void set_allocated_full_url(std::string* full_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_url(
      std::string* full_url);
  private:
  const std::string& _internal_full_url() const;
  void _internal_set_full_url(const std::string& value);
  std::string* _internal_mutable_full_url();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:shorturl_rpc.ResolveShortUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shorturl_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvertToShortUrlRequest

// string full_url = 1;
inline void ConvertToShortUrlRequest::clear_full_url() {
  full_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConvertToShortUrlRequest::full_url() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ConvertToShortUrlRequest.full_url)
  return _internal_full_url();
}
inline void ConvertToShortUrlRequest::set_full_url(const std::string& value) {
  _internal_set_full_url(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}
inline std::string* ConvertToShortUrlRequest::mutable_full_url() {
  // @@protoc_insertion_point(field_mutable:shorturl_rpc.ConvertToShortUrlRequest.full_url)
  return _internal_mutable_full_url();
}
inline const std::string& ConvertToShortUrlRequest::_internal_full_url() const {
  return full_url_.Get();
}
inline void ConvertToShortUrlRequest::_internal_set_full_url(const std::string& value) {
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConvertToShortUrlRequest::set_full_url(std::string&& value) {
  
  full_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}
inline void ConvertToShortUrlRequest::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}
inline void ConvertToShortUrlRequest::set_full_url(const char* value,
    size_t size) {
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}
inline std::string* ConvertToShortUrlRequest::_internal_mutable_full_url() {
  
  return full_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConvertToShortUrlRequest::release_full_url() {
  // @@protoc_insertion_point(field_release:shorturl_rpc.ConvertToShortUrlRequest.full_url)
  return full_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConvertToShortUrlRequest::set_allocated_full_url(std::string* full_url) {
  if (full_url != nullptr) {
    
  } else {
    
  }
  full_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}
inline std::string* ConvertToShortUrlRequest::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shorturl_rpc.ConvertToShortUrlRequest.full_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConvertToShortUrlRequest::unsafe_arena_set_allocated_full_url(
    std::string* full_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_url != nullptr) {
    
  } else {
    
  }
  full_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shorturl_rpc.ConvertToShortUrlRequest.full_url)
}

// -------------------------------------------------------------------

// ConvertToShortUrlResponse

// int32 code = 1;
inline void ConvertToShortUrlResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvertToShortUrlResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConvertToShortUrlResponse::code() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ConvertToShortUrlResponse.code)
  return _internal_code();
}
inline void ConvertToShortUrlResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ConvertToShortUrlResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ConvertToShortUrlResponse.code)
}

// string urlmd5 = 2;
inline void ConvertToShortUrlResponse::clear_urlmd5() {
  urlmd5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConvertToShortUrlResponse::urlmd5() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
  return _internal_urlmd5();
}
inline void ConvertToShortUrlResponse::set_urlmd5(const std::string& value) {
  _internal_set_urlmd5(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}
inline std::string* ConvertToShortUrlResponse::mutable_urlmd5() {
  // @@protoc_insertion_point(field_mutable:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
  return _internal_mutable_urlmd5();
}
inline const std::string& ConvertToShortUrlResponse::_internal_urlmd5() const {
  return urlmd5_.Get();
}
inline void ConvertToShortUrlResponse::_internal_set_urlmd5(const std::string& value) {
  
  urlmd5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConvertToShortUrlResponse::set_urlmd5(std::string&& value) {
  
  urlmd5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}
inline void ConvertToShortUrlResponse::set_urlmd5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  urlmd5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}
inline void ConvertToShortUrlResponse::set_urlmd5(const char* value,
    size_t size) {
  
  urlmd5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}
inline std::string* ConvertToShortUrlResponse::_internal_mutable_urlmd5() {
  
  return urlmd5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConvertToShortUrlResponse::release_urlmd5() {
  // @@protoc_insertion_point(field_release:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
  return urlmd5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConvertToShortUrlResponse::set_allocated_urlmd5(std::string* urlmd5) {
  if (urlmd5 != nullptr) {
    
  } else {
    
  }
  urlmd5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), urlmd5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}
inline std::string* ConvertToShortUrlResponse::unsafe_arena_release_urlmd5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return urlmd5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConvertToShortUrlResponse::unsafe_arena_set_allocated_urlmd5(
    std::string* urlmd5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (urlmd5 != nullptr) {
    
  } else {
    
  }
  urlmd5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      urlmd5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shorturl_rpc.ConvertToShortUrlResponse.urlmd5)
}

// -------------------------------------------------------------------

// ResolveShortUrlRequest

// string short_url = 1;
inline void ResolveShortUrlRequest::clear_short_url() {
  short_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResolveShortUrlRequest::short_url() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ResolveShortUrlRequest.short_url)
  return _internal_short_url();
}
inline void ResolveShortUrlRequest::set_short_url(const std::string& value) {
  _internal_set_short_url(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ResolveShortUrlRequest.short_url)
}
inline std::string* ResolveShortUrlRequest::mutable_short_url() {
  // @@protoc_insertion_point(field_mutable:shorturl_rpc.ResolveShortUrlRequest.short_url)
  return _internal_mutable_short_url();
}
inline const std::string& ResolveShortUrlRequest::_internal_short_url() const {
  return short_url_.Get();
}
inline void ResolveShortUrlRequest::_internal_set_short_url(const std::string& value) {
  
  short_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResolveShortUrlRequest::set_short_url(std::string&& value) {
  
  short_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorturl_rpc.ResolveShortUrlRequest.short_url)
}
inline void ResolveShortUrlRequest::set_short_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorturl_rpc.ResolveShortUrlRequest.short_url)
}
inline void ResolveShortUrlRequest::set_short_url(const char* value,
    size_t size) {
  
  short_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorturl_rpc.ResolveShortUrlRequest.short_url)
}
inline std::string* ResolveShortUrlRequest::_internal_mutable_short_url() {
  
  return short_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResolveShortUrlRequest::release_short_url() {
  // @@protoc_insertion_point(field_release:shorturl_rpc.ResolveShortUrlRequest.short_url)
  return short_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResolveShortUrlRequest::set_allocated_short_url(std::string* short_url) {
  if (short_url != nullptr) {
    
  } else {
    
  }
  short_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorturl_rpc.ResolveShortUrlRequest.short_url)
}
inline std::string* ResolveShortUrlRequest::unsafe_arena_release_short_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shorturl_rpc.ResolveShortUrlRequest.short_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return short_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResolveShortUrlRequest::unsafe_arena_set_allocated_short_url(
    std::string* short_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (short_url != nullptr) {
    
  } else {
    
  }
  short_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      short_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shorturl_rpc.ResolveShortUrlRequest.short_url)
}

// -------------------------------------------------------------------

// ResolveShortUrlResponse

// int32 code = 1;
inline void ResolveShortUrlResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveShortUrlResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResolveShortUrlResponse::code() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ResolveShortUrlResponse.code)
  return _internal_code();
}
inline void ResolveShortUrlResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ResolveShortUrlResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ResolveShortUrlResponse.code)
}

// string full_url = 2;
inline void ResolveShortUrlResponse::clear_full_url() {
  full_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResolveShortUrlResponse::full_url() const {
  // @@protoc_insertion_point(field_get:shorturl_rpc.ResolveShortUrlResponse.full_url)
  return _internal_full_url();
}
inline void ResolveShortUrlResponse::set_full_url(const std::string& value) {
  _internal_set_full_url(value);
  // @@protoc_insertion_point(field_set:shorturl_rpc.ResolveShortUrlResponse.full_url)
}
inline std::string* ResolveShortUrlResponse::mutable_full_url() {
  // @@protoc_insertion_point(field_mutable:shorturl_rpc.ResolveShortUrlResponse.full_url)
  return _internal_mutable_full_url();
}
inline const std::string& ResolveShortUrlResponse::_internal_full_url() const {
  return full_url_.Get();
}
inline void ResolveShortUrlResponse::_internal_set_full_url(const std::string& value) {
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResolveShortUrlResponse::set_full_url(std::string&& value) {
  
  full_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:shorturl_rpc.ResolveShortUrlResponse.full_url)
}
inline void ResolveShortUrlResponse::set_full_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:shorturl_rpc.ResolveShortUrlResponse.full_url)
}
inline void ResolveShortUrlResponse::set_full_url(const char* value,
    size_t size) {
  
  full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:shorturl_rpc.ResolveShortUrlResponse.full_url)
}
inline std::string* ResolveShortUrlResponse::_internal_mutable_full_url() {
  
  return full_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResolveShortUrlResponse::release_full_url() {
  // @@protoc_insertion_point(field_release:shorturl_rpc.ResolveShortUrlResponse.full_url)
  return full_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResolveShortUrlResponse::set_allocated_full_url(std::string* full_url) {
  if (full_url != nullptr) {
    
  } else {
    
  }
  full_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:shorturl_rpc.ResolveShortUrlResponse.full_url)
}
inline std::string* ResolveShortUrlResponse::unsafe_arena_release_full_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shorturl_rpc.ResolveShortUrlResponse.full_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResolveShortUrlResponse::unsafe_arena_set_allocated_full_url(
    std::string* full_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_url != nullptr) {
    
  } else {
    
  }
  full_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shorturl_rpc.ResolveShortUrlResponse.full_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shorturl_rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shorturl_5frpc_2eproto
