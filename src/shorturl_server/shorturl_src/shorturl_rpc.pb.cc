// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shorturl_rpc.proto

#include "shorturl_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace shorturl_rpc {
class ConvertToShortUrlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvertToShortUrlRequest> _instance;
} _ConvertToShortUrlRequest_default_instance_;
class ConvertToShortUrlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvertToShortUrlResponse> _instance;
} _ConvertToShortUrlResponse_default_instance_;
class ResolveShortUrlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveShortUrlRequest> _instance;
} _ResolveShortUrlRequest_default_instance_;
class ResolveShortUrlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveShortUrlResponse> _instance;
} _ResolveShortUrlResponse_default_instance_;
}  // namespace shorturl_rpc
static void InitDefaultsscc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shorturl_rpc::_ConvertToShortUrlRequest_default_instance_;
    new (ptr) ::shorturl_rpc::ConvertToShortUrlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shorturl_rpc::ConvertToShortUrlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shorturl_rpc::_ConvertToShortUrlResponse_default_instance_;
    new (ptr) ::shorturl_rpc::ConvertToShortUrlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shorturl_rpc::ConvertToShortUrlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shorturl_rpc::_ResolveShortUrlRequest_default_instance_;
    new (ptr) ::shorturl_rpc::ResolveShortUrlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shorturl_rpc::ResolveShortUrlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::shorturl_rpc::_ResolveShortUrlResponse_default_instance_;
    new (ptr) ::shorturl_rpc::ResolveShortUrlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::shorturl_rpc::ResolveShortUrlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shorturl_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_shorturl_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shorturl_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shorturl_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ConvertToShortUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ConvertToShortUrlRequest, full_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ConvertToShortUrlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ConvertToShortUrlResponse, code_),
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ConvertToShortUrlResponse, urlmd5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ResolveShortUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ResolveShortUrlRequest, short_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ResolveShortUrlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ResolveShortUrlResponse, code_),
  PROTOBUF_FIELD_OFFSET(::shorturl_rpc::ResolveShortUrlResponse, full_url_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::shorturl_rpc::ConvertToShortUrlRequest)},
  { 6, -1, sizeof(::shorturl_rpc::ConvertToShortUrlResponse)},
  { 13, -1, sizeof(::shorturl_rpc::ResolveShortUrlRequest)},
  { 19, -1, sizeof(::shorturl_rpc::ResolveShortUrlResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shorturl_rpc::_ConvertToShortUrlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shorturl_rpc::_ConvertToShortUrlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shorturl_rpc::_ResolveShortUrlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::shorturl_rpc::_ResolveShortUrlResponse_default_instance_),
};

const char descriptor_table_protodef_shorturl_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022shorturl_rpc.proto\022\014shorturl_rpc\",\n\030Co"
  "nvertToShortUrlRequest\022\020\n\010full_url\030\001 \001(\t"
  "\"9\n\031ConvertToShortUrlResponse\022\014\n\004code\030\001 "
  "\001(\005\022\016\n\006urlmd5\030\002 \001(\t\"+\n\026ResolveShortUrlRe"
  "quest\022\021\n\tshort_url\030\001 \001(\t\"9\n\027ResolveShort"
  "UrlResponse\022\014\n\004code\030\001 \001(\005\022\020\n\010full_url\030\002 "
  "\001(\t2\327\001\n\017ShortUrlService\022d\n\021ConvertToShor"
  "tUrl\022&.shorturl_rpc.ConvertToShortUrlReq"
  "uest\032\'.shorturl_rpc.ConvertToShortUrlRes"
  "ponse\022^\n\017ResolveShortUrl\022$.shorturl_rpc."
  "ResolveShortUrlRequest\032%.shorturl_rpc.Re"
  "solveShortUrlResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shorturl_5frpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shorturl_5frpc_2eproto_sccs[4] = {
  &scc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto.base,
  &scc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto.base,
  &scc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto.base,
  &scc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shorturl_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shorturl_5frpc_2eproto = {
  false, false, descriptor_table_protodef_shorturl_5frpc_2eproto, "shorturl_rpc.proto", 469,
  &descriptor_table_shorturl_5frpc_2eproto_once, descriptor_table_shorturl_5frpc_2eproto_sccs, descriptor_table_shorturl_5frpc_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_shorturl_5frpc_2eproto::offsets,
  file_level_metadata_shorturl_5frpc_2eproto, 4, file_level_enum_descriptors_shorturl_5frpc_2eproto, file_level_service_descriptors_shorturl_5frpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shorturl_5frpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shorturl_5frpc_2eproto)), true);
namespace shorturl_rpc {

// ===================================================================

void ConvertToShortUrlRequest::InitAsDefaultInstance() {
}
class ConvertToShortUrlRequest::_Internal {
 public:
};

ConvertToShortUrlRequest::ConvertToShortUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shorturl_rpc.ConvertToShortUrlRequest)
}
ConvertToShortUrlRequest::ConvertToShortUrlRequest(const ConvertToShortUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full_url().empty()) {
    full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:shorturl_rpc.ConvertToShortUrlRequest)
}

void ConvertToShortUrlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto.base);
  full_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConvertToShortUrlRequest::~ConvertToShortUrlRequest() {
  // @@protoc_insertion_point(destructor:shorturl_rpc.ConvertToShortUrlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConvertToShortUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  full_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvertToShortUrlRequest::ArenaDtor(void* object) {
  ConvertToShortUrlRequest* _this = reinterpret_cast< ConvertToShortUrlRequest* >(object);
  (void)_this;
}
void ConvertToShortUrlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvertToShortUrlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvertToShortUrlRequest& ConvertToShortUrlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvertToShortUrlRequest_shorturl_5frpc_2eproto.base);
  return *internal_default_instance();
}


void ConvertToShortUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shorturl_rpc.ConvertToShortUrlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertToShortUrlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string full_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_full_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shorturl_rpc.ConvertToShortUrlRequest.full_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertToShortUrlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shorturl_rpc.ConvertToShortUrlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_url = 1;
  if (this->full_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_url().data(), static_cast<int>(this->_internal_full_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shorturl_rpc.ConvertToShortUrlRequest.full_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_full_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shorturl_rpc.ConvertToShortUrlRequest)
  return target;
}

size_t ConvertToShortUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shorturl_rpc.ConvertToShortUrlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string full_url = 1;
  if (this->full_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvertToShortUrlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shorturl_rpc.ConvertToShortUrlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertToShortUrlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvertToShortUrlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shorturl_rpc.ConvertToShortUrlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shorturl_rpc.ConvertToShortUrlRequest)
    MergeFrom(*source);
  }
}

void ConvertToShortUrlRequest::MergeFrom(const ConvertToShortUrlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shorturl_rpc.ConvertToShortUrlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_url().size() > 0) {
    _internal_set_full_url(from._internal_full_url());
  }
}

void ConvertToShortUrlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shorturl_rpc.ConvertToShortUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertToShortUrlRequest::CopyFrom(const ConvertToShortUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shorturl_rpc.ConvertToShortUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertToShortUrlRequest::IsInitialized() const {
  return true;
}

void ConvertToShortUrlRequest::InternalSwap(ConvertToShortUrlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  full_url_.Swap(&other->full_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertToShortUrlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvertToShortUrlResponse::InitAsDefaultInstance() {
}
class ConvertToShortUrlResponse::_Internal {
 public:
};

ConvertToShortUrlResponse::ConvertToShortUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shorturl_rpc.ConvertToShortUrlResponse)
}
ConvertToShortUrlResponse::ConvertToShortUrlResponse(const ConvertToShortUrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  urlmd5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_urlmd5().empty()) {
    urlmd5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_urlmd5(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:shorturl_rpc.ConvertToShortUrlResponse)
}

void ConvertToShortUrlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto.base);
  urlmd5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ConvertToShortUrlResponse::~ConvertToShortUrlResponse() {
  // @@protoc_insertion_point(destructor:shorturl_rpc.ConvertToShortUrlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConvertToShortUrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  urlmd5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvertToShortUrlResponse::ArenaDtor(void* object) {
  ConvertToShortUrlResponse* _this = reinterpret_cast< ConvertToShortUrlResponse* >(object);
  (void)_this;
}
void ConvertToShortUrlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvertToShortUrlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvertToShortUrlResponse& ConvertToShortUrlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvertToShortUrlResponse_shorturl_5frpc_2eproto.base);
  return *internal_default_instance();
}


void ConvertToShortUrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shorturl_rpc.ConvertToShortUrlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urlmd5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvertToShortUrlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string urlmd5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_urlmd5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shorturl_rpc.ConvertToShortUrlResponse.urlmd5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvertToShortUrlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shorturl_rpc.ConvertToShortUrlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string urlmd5 = 2;
  if (this->urlmd5().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_urlmd5().data(), static_cast<int>(this->_internal_urlmd5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shorturl_rpc.ConvertToShortUrlResponse.urlmd5");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_urlmd5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shorturl_rpc.ConvertToShortUrlResponse)
  return target;
}

size_t ConvertToShortUrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shorturl_rpc.ConvertToShortUrlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string urlmd5 = 2;
  if (this->urlmd5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_urlmd5());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvertToShortUrlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shorturl_rpc.ConvertToShortUrlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertToShortUrlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvertToShortUrlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shorturl_rpc.ConvertToShortUrlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shorturl_rpc.ConvertToShortUrlResponse)
    MergeFrom(*source);
  }
}

void ConvertToShortUrlResponse::MergeFrom(const ConvertToShortUrlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shorturl_rpc.ConvertToShortUrlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.urlmd5().size() > 0) {
    _internal_set_urlmd5(from._internal_urlmd5());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ConvertToShortUrlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shorturl_rpc.ConvertToShortUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertToShortUrlResponse::CopyFrom(const ConvertToShortUrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shorturl_rpc.ConvertToShortUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertToShortUrlResponse::IsInitialized() const {
  return true;
}

void ConvertToShortUrlResponse::InternalSwap(ConvertToShortUrlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  urlmd5_.Swap(&other->urlmd5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvertToShortUrlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveShortUrlRequest::InitAsDefaultInstance() {
}
class ResolveShortUrlRequest::_Internal {
 public:
};

ResolveShortUrlRequest::ResolveShortUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shorturl_rpc.ResolveShortUrlRequest)
}
ResolveShortUrlRequest::ResolveShortUrlRequest(const ResolveShortUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  short_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_short_url().empty()) {
    short_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_short_url(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:shorturl_rpc.ResolveShortUrlRequest)
}

void ResolveShortUrlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto.base);
  short_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResolveShortUrlRequest::~ResolveShortUrlRequest() {
  // @@protoc_insertion_point(destructor:shorturl_rpc.ResolveShortUrlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResolveShortUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  short_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResolveShortUrlRequest::ArenaDtor(void* object) {
  ResolveShortUrlRequest* _this = reinterpret_cast< ResolveShortUrlRequest* >(object);
  (void)_this;
}
void ResolveShortUrlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolveShortUrlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveShortUrlRequest& ResolveShortUrlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveShortUrlRequest_shorturl_5frpc_2eproto.base);
  return *internal_default_instance();
}


void ResolveShortUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:shorturl_rpc.ResolveShortUrlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  short_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolveShortUrlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string short_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_short_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shorturl_rpc.ResolveShortUrlRequest.short_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveShortUrlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shorturl_rpc.ResolveShortUrlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string short_url = 1;
  if (this->short_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_short_url().data(), static_cast<int>(this->_internal_short_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shorturl_rpc.ResolveShortUrlRequest.short_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_short_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shorturl_rpc.ResolveShortUrlRequest)
  return target;
}

size_t ResolveShortUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shorturl_rpc.ResolveShortUrlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string short_url = 1;
  if (this->short_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_short_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveShortUrlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shorturl_rpc.ResolveShortUrlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveShortUrlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveShortUrlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shorturl_rpc.ResolveShortUrlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shorturl_rpc.ResolveShortUrlRequest)
    MergeFrom(*source);
  }
}

void ResolveShortUrlRequest::MergeFrom(const ResolveShortUrlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shorturl_rpc.ResolveShortUrlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.short_url().size() > 0) {
    _internal_set_short_url(from._internal_short_url());
  }
}

void ResolveShortUrlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shorturl_rpc.ResolveShortUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveShortUrlRequest::CopyFrom(const ResolveShortUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shorturl_rpc.ResolveShortUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveShortUrlRequest::IsInitialized() const {
  return true;
}

void ResolveShortUrlRequest::InternalSwap(ResolveShortUrlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  short_url_.Swap(&other->short_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveShortUrlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveShortUrlResponse::InitAsDefaultInstance() {
}
class ResolveShortUrlResponse::_Internal {
 public:
};

ResolveShortUrlResponse::ResolveShortUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:shorturl_rpc.ResolveShortUrlResponse)
}
ResolveShortUrlResponse::ResolveShortUrlResponse(const ResolveShortUrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full_url().empty()) {
    full_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_url(),
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:shorturl_rpc.ResolveShortUrlResponse)
}

void ResolveShortUrlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto.base);
  full_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

ResolveShortUrlResponse::~ResolveShortUrlResponse() {
  // @@protoc_insertion_point(destructor:shorturl_rpc.ResolveShortUrlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResolveShortUrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  full_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResolveShortUrlResponse::ArenaDtor(void* object) {
  ResolveShortUrlResponse* _this = reinterpret_cast< ResolveShortUrlResponse* >(object);
  (void)_this;
}
void ResolveShortUrlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolveShortUrlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveShortUrlResponse& ResolveShortUrlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveShortUrlResponse_shorturl_5frpc_2eproto.base);
  return *internal_default_instance();
}


void ResolveShortUrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:shorturl_rpc.ResolveShortUrlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolveShortUrlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string full_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_full_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "shorturl_rpc.ResolveShortUrlResponse.full_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveShortUrlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:shorturl_rpc.ResolveShortUrlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string full_url = 2;
  if (this->full_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_url().data(), static_cast<int>(this->_internal_full_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "shorturl_rpc.ResolveShortUrlResponse.full_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:shorturl_rpc.ResolveShortUrlResponse)
  return target;
}

size_t ResolveShortUrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:shorturl_rpc.ResolveShortUrlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string full_url = 2;
  if (this->full_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_url());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveShortUrlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:shorturl_rpc.ResolveShortUrlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveShortUrlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveShortUrlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:shorturl_rpc.ResolveShortUrlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:shorturl_rpc.ResolveShortUrlResponse)
    MergeFrom(*source);
  }
}

void ResolveShortUrlResponse::MergeFrom(const ResolveShortUrlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:shorturl_rpc.ResolveShortUrlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_url().size() > 0) {
    _internal_set_full_url(from._internal_full_url());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ResolveShortUrlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:shorturl_rpc.ResolveShortUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveShortUrlResponse::CopyFrom(const ResolveShortUrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:shorturl_rpc.ResolveShortUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveShortUrlResponse::IsInitialized() const {
  return true;
}

void ResolveShortUrlResponse::InternalSwap(ResolveShortUrlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  full_url_.Swap(&other->full_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveShortUrlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shorturl_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::shorturl_rpc::ConvertToShortUrlRequest* Arena::CreateMaybeMessage< ::shorturl_rpc::ConvertToShortUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shorturl_rpc::ConvertToShortUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shorturl_rpc::ConvertToShortUrlResponse* Arena::CreateMaybeMessage< ::shorturl_rpc::ConvertToShortUrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shorturl_rpc::ConvertToShortUrlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::shorturl_rpc::ResolveShortUrlRequest* Arena::CreateMaybeMessage< ::shorturl_rpc::ResolveShortUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shorturl_rpc::ResolveShortUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::shorturl_rpc::ResolveShortUrlResponse* Arena::CreateMaybeMessage< ::shorturl_rpc::ResolveShortUrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::shorturl_rpc::ResolveShortUrlResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
